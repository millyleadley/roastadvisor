// Code generated by goa v3.19.1, DO NOT EDIT.
//
// Reviews HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/millyleadley/roastadvisor/api/design -o api

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	reviews "github.com/millyleadley/roastadvisor/api/gen/reviews"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "Reviews" service "List" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListReviewsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Reviews", "List", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the Reviews
// List endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Reviews", "List", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateReviewResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("Reviews", "List", err)
			}
			res := NewListReviewOK(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Reviews", "List", resp.StatusCode, string(body))
		}
	}
}

// unmarshalReviewResponseToReviewsReview builds a value of type
// *reviews.Review from a value of type *ReviewResponse.
func unmarshalReviewResponseToReviewsReview(v *ReviewResponse) *reviews.Review {
	res := &reviews.Review{
		ID:           *v.ID,
		UserID:       *v.UserID,
		RestaurantID: *v.RestaurantID,
	}

	return res
}
