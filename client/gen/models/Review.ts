/* tslint:disable */
/* eslint-disable */
/**
 * Roast Advisor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Review
 */
export interface Review {
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    archivedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    commentAddOns?: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    commentMeat?: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    commentPotatoes?: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    commentPrice?: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    commentSize?: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    commentVeg?: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    ratingAddOns: number;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    ratingMeat: number;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    ratingPotatoes: number;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    ratingPrice: number;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    ratingSize: number;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    ratingVeg: number;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    restaurantID: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    updatedAt: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    userID: string;
}

/**
 * Check if a given object implements the Review interface.
 */
export function instanceOfReview(value: object): value is Review {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('ratingAddOns' in value) || value['ratingAddOns'] === undefined) return false;
    if (!('ratingMeat' in value) || value['ratingMeat'] === undefined) return false;
    if (!('ratingPotatoes' in value) || value['ratingPotatoes'] === undefined) return false;
    if (!('ratingPrice' in value) || value['ratingPrice'] === undefined) return false;
    if (!('ratingSize' in value) || value['ratingSize'] === undefined) return false;
    if (!('ratingVeg' in value) || value['ratingVeg'] === undefined) return false;
    if (!('restaurantID' in value) || value['restaurantID'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userID' in value) || value['userID'] === undefined) return false;
    return true;
}

export function ReviewFromJSON(json: any): Review {
    return ReviewFromJSONTyped(json, false);
}

export function ReviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): Review {
    if (json == null) {
        return json;
    }
    return {
        
        'archivedAt': json['archivedAt'] == null ? undefined : json['archivedAt'],
        'commentAddOns': json['commentAddOns'] == null ? undefined : json['commentAddOns'],
        'commentMeat': json['commentMeat'] == null ? undefined : json['commentMeat'],
        'commentPotatoes': json['commentPotatoes'] == null ? undefined : json['commentPotatoes'],
        'commentPrice': json['commentPrice'] == null ? undefined : json['commentPrice'],
        'commentSize': json['commentSize'] == null ? undefined : json['commentSize'],
        'commentVeg': json['commentVeg'] == null ? undefined : json['commentVeg'],
        'createdAt': json['createdAt'],
        'id': json['id'],
        'ratingAddOns': json['ratingAddOns'],
        'ratingMeat': json['ratingMeat'],
        'ratingPotatoes': json['ratingPotatoes'],
        'ratingPrice': json['ratingPrice'],
        'ratingSize': json['ratingSize'],
        'ratingVeg': json['ratingVeg'],
        'restaurantID': json['restaurantID'],
        'updatedAt': json['updatedAt'],
        'userID': json['userID'],
    };
}

export function ReviewToJSON(value?: Review | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'archivedAt': value['archivedAt'],
        'commentAddOns': value['commentAddOns'],
        'commentMeat': value['commentMeat'],
        'commentPotatoes': value['commentPotatoes'],
        'commentPrice': value['commentPrice'],
        'commentSize': value['commentSize'],
        'commentVeg': value['commentVeg'],
        'createdAt': value['createdAt'],
        'id': value['id'],
        'ratingAddOns': value['ratingAddOns'],
        'ratingMeat': value['ratingMeat'],
        'ratingPotatoes': value['ratingPotatoes'],
        'ratingPrice': value['ratingPrice'],
        'ratingSize': value['ratingSize'],
        'ratingVeg': value['ratingVeg'],
        'restaurantID': value['restaurantID'],
        'updatedAt': value['updatedAt'],
        'userID': value['userID'],
    };
}

